query GetPerson($search: String!) {
  fuzzy_search(args: { search_text: $search }) {
    person_id
    full_name
    employee_id
  }
}

query person_query($pid: Int!) {
  person(where: { person_id: { _eq: $pid } }) {
    first_name
    middle_names
    last_name
    modified_by
    nick_name
    person_id
    last_employee_list_name
    last_employee_list_action
    last_employee_df
    last_df_list_name
    date_modified
    date_marked_invalid
    date_added
    cohort
    person_campuses {
      area {
        area_id
        area
        super_area {
          super_area_id
          super_area
        }
      }
      turfid
      is_pi
      date_last_known_valid
    }
    person_type {
      id
      person_type
    }
  }
}

mutation create_person(
  $first_name: String!
  $middle_name: String
  $last_name: String!
  $nickname: String
  $suffix: String
  $employeeid: String
) {
  insert_person(
    objects: {
      first_name: $first_name
      middle_names: $middle_name
      last_name: $last_name
      nick_name: $nickname
      suffix: $suffix
      employee_id: $employeeid
    }
  ) {
    returning {
      first_name
      middle_names
      last_name
      nick_name
      suffix
      modified_by
      employee_id
      person_id
    }
  }
}

query name_source_query {
  name_source_type {
    name_source_type_id
    name_source_type
  }
}

query information_sources {
  information_source_type {
    information_source_type_id
    information_source_type
  }
}

query home_address_query($pid: Int!) {
  person_home_address(where: { person_id: { _eq: $pid } }) {
    person_home_address_id
    street_number
    street_name
    apartment
    city
    state
    country
    accuracy
    coments
    date_first_known_valid
    date_last_known_valid
    date_marked_invalid
    information_source_type {
      information_source_type_id
      information_source_type
    }
  }
}

mutation insert_person_home_address(
  $pid: Int!
  $street: String
  $streetname: String
  $apt: String
  $city: String
  $postal: String
  $country: String
  $comments: String
  $source: Int!
  $normalized: String
) {
  insert_person_home_address_one(
    object: {
      person_id: $pid
      street_number: $street
      street_name: $streetname
      apartment: $apt
      city: $city
      zip_code: $postal
      country: $country
      coments: $comments
      information_source_type_id: $source
      accuracy: "ROOFTOP"
      normalized_address: $normalized
    }
  ) {
    person_id
    street_number
    street_name
    apartment
    city
    zip_code
    country
    person_home_address_id
    created_by
    date_first_known_valid
    date_last_known_valid
    accuracy
  }
}

mutation invalidate_person_home_address($id: Int!, $date: timestamp!) {
  update_person_home_address_by_pk(
    pk_columns: { person_home_address_id: $id }
    _set: { date_marked_invalid: $date }
  ) {
    date_marked_invalid
  }
}
mutation validate_person_home_address($id: Int!, $date: timestamp!) {
  update_person_home_address_by_pk(
    pk_columns: { person_home_address_id: $id }
    _set: { date_last_known_valid: $date }
  ) {
    date_last_known_valid
  }
}

mutation delete_person_home_address($id: Int!) {
  delete_person_home_address(where: { person_home_address_id: { _eq: $id } }) {
    affected_rows
  }
}

mutation update_person_home_address(
  $id: Int!
  $streetnumber: String
  $streetname: String
  $apartment: String
  $city: String
  $state: String
  $postal: String
  $country: String
  $comments: String
  $source: Int
  $date: timestamp
  $normalized: String
) {
  update_person_home_address_by_pk(
    pk_columns: { person_home_address_id: $id }
    _set: {
      street_number: $streetnumber
      street_name: $streetname
      apartment: $apartment
      city: $city
      state: $state
      country: $country
      comments: $comments
      information_source_type_id: $source
      date_last_known_valid: $date
      accuracy: "ROOFTOP"
      zip_code: $postal
      normalized_address: $normalized
    }
  ) {
    person_home_address_id
    street_number
    street_name
    state
    person_id
    date_first_known_valid
    date_last_known_valid
    date_marked_invalid
    comments
    country
    accuracy
  }
}

mutation update_person_home_address_dmi_null($id: Int) {
  update_person_home_address(
    where: { person_home_address_id: { _eq: $id } }
    _set: { date_marked_invalid: null }
  ) {
    affected_rows
  }
}

#/////////////////////////
query person_other_name_query($pid: Int!) {
  person_other_name(where: { person_id: { _eq: $pid } }) {
    person_other_name_id
    person_id
    name_source_type {
      name_source_type_id
      name_source_type
    }
    name_source_subtype {
      name_source_subtype_id
      name_source_subtype
    }
    first_name
    middle_name
    last_name
    nick_name
    suffix
    date_first_known_valid
    date_last_known_valid
    date_marked_invalid
  }
}

query name_source_subtype_query($id: Int!) {
  name_source_subtype(where: { name_source_type_id: { _eq: $id } }) {
    name_source_type {
      name_source_type_id
      name_source_type
    }
    name_source_subtype_id
    name_source_subtype
  }
}

query name_source_type_query {
  name_source_type {
    name_source_type_id
    name_source_type
  }
}

query person_campus_query($pid: Int!) {
  person_campus(where: { person_id: { _eq: $pid } }) {
    person_id
    person_campus_id
    campus {
      campus_id
      campus_name
    }
    area {
      area_id
      area
      campus_id
      super_area {
        super_area_id
        super_area
        campus_id
      }
      comments
    }
    turfid
    information_source_type {
      information_source_type_id
      information_source_type
    }
    supress
    is_pi
    date_first_known_valid
    date_last_known_valid
    date_marked_invalid
  }
}

query person_campus_query($pid: Int!) {
  person_campus(where: { person_id: { _eq: $pid } }) {
    person_id
    person_campus_id
    campus {
      campus_id
      campus_name
    }
    area {
      area_id
      area
      campus_id
      super_area {
        super_area_id
        super_area
        campus_id
      }
      comments
    }
    turfid
    information_source_type {
      information_source_type_id
      information_source_type
    }
    supress
    is_pi
    date_first_known_valid
    date_last_known_valid
    date_marked_invalid
  }
}

query campus_query {
  campus {
    campus_id
    campus_name
  }
}

query super_area_query($campus: Int!) {
  super_area(where: { campus_id: { _eq: $campus } }) {
    super_area_id
    super_area
    campus_id
    #    areas {
    #      area_id
    #      area
    #      campus_id
    #    }
  }
}

query area_query($campus: Int!, $superarea: Int!) {
  area(
    where: { super_area_id: { _eq: $superarea }, campus_id: { _eq: $campus } }
  ) {
    area_id
    area
    #    super_area_id
    #    campus_id
  }
}
mutation update_person_campus(
  $id: Int!
  $campus: Int
  $area: Int = null
  $turf: Int = null
  $source: Int!
  $supress: Boolean
  $pi: Boolean = false
  $comments: String = null
  $date: timestamp
) {
  update_person_campus_by_pk(
    pk_columns: { person_campus_id: $id }
    _set: {
      campus_id: $campus
      area_id: $area
      turfid: $turf
      information_source_id: $source
      supress: $supress
      is_pi: $pi
      summary: $comments
      date_last_known_valid: $date
    }
  ) {
    person_campus_id
    person_id
    summary
    campus {
      campus_id
      campus_name
    }
    area {
      area_id
      area
      super_area {
        super_area_id
        super_area
      }
    }
    turfid
    information_source_type {
      information_source_type_id
      information_source_type
    }
    supress
    is_pi
    date_first_known_valid
    date_last_known_valid
    date_marked_invalid
  }
}

query person_research_query($pid: Int!) {
  person_research(where: { person_id: { _eq: $pid } }) {
    person_research_id
    person_id
    date_researched
    comments
    created_by
  }
}
mutation insert_person_campus(
  $pid: Int!
  $campus: Int!
  $area: Int = null
  $turf: Int = null
  $source: Int!
  $supress: Boolean = false
  $pi: Boolean = false
  $comments: String = null
) {
  insert_person_campus_one(
    object: {
      campus_id: $campus
      area_id: $area
      turfid: $turf
      information_source_id: $source
      supress: $supress
      is_pi: $pi
      summary: $comments
      person_id: $pid
    }
  ) {
    person_campus_id
    campus {
      campus_id
      campus_name
    }
    area {
      area_id
      area
      super_area {
        super_area_id
        super_area
      }
    }
    turfid
    information_source_type {
      information_source_type_id
      information_source_type
    }
    is_pi
    summary
    date_first_known_valid
    date_last_known_valid
    date_marked_invalid
    person_id
  }
}

query person_campus_query($pid: Int!) {
  person_campus(where: { person_id: { _eq: $pid } }) {
    person_id
    person_campus_id
    campus {
      campus_id
      campus_name
    }
    area {
      area_id
      area
      campus_id
      super_area {
        super_area_id
        super_area
        campus_id
      }
      comments
    }
    turfid
    information_source_type {
      information_source_type_id
      information_source_type
    }
    supress
    is_pi
    date_first_known_valid
    date_last_known_valid
    date_marked_invalid
    summary
  }
}

mutation update_person(
  $pid: String
  $first_name: String
  $middle_names: String
  $last_name: String
  $nickname: String
  $suffix: String
  $employee_id: String
) {
  update_person(
    objects: {
      pid: $pid
      first_name: $first_name
      middle_names: $middle_names
      last_name: $last_name
      nick_name: $nickname
      suffix: $suffix
      employee_id: $employee_id
    }
  ) {
    returning {
      first_name
      middle_names
      last_name
      nick_name
      suffix
      modified_by
      employee_id
      person_id
    }
  }
}

mutation update_person(
  $pid: Int!
  $first_name: String
  $middle_name: String
  $last_name: String
  $nick_name: String
  $suffix: String
  $employee_id: String
  $persontype: Int
  $date_modified: timestamp
) {
  update_person_by_pk(
    pk_columns: { person_id: $pid }
    _set: {
      first_name: $first_name
      middle_names: $middle_name
      last_name: $last_name
      nick_name: $nick_name
      suffix: $suffix
      employee_id: $employee_id
      person_type_id: $persontype
      date_modified: $date_modified
    }
  ) {
    person_id
    first_name
    middle_names
    last_name
    nick_name
    suffix
    employee_ida
    person_type {
      id
      person_type
    }
    date_added
    date_modified
    modified_by
  }
}
query person_type_query {
  person_type {
    id
    person_type
  }
}

query person_electronic_query($pid: Int!) {
  person_electronic(where: { person_id: { _eq: $pid } }) {
    person_id
    person_electronic_id
    electronic_type {
      electronic_type_id
      electronic_type
    }
    information_source_type {
      information_source_type_id
      information_source_type
    }
    date_first_known_valid
    date_last_known_valid
    date_marked_do_not_include
    date_marked_invalid
  }
}

mutation insert_person_electronic($pid: Int!, $email: String!, $source: Int!, $electronictype: Int!) {
  insert_person_electronic_one(object: {electronic_address: $email, information_source_type_id: $source,
    electronic_type_id: $electronictype, person_id: $pid}) {
    person_id
    person_electronic_id
    electronic_address
    electronic_type {
      electronic_type_id
      electronic_type
    }
    information_source_type {
      information_source_type_id
      information_source_type
    }
    date_first_known_valid
    date_last_known_valid
    date_marked_invalid
  }
}


mutation insert_person_electronic($pid: Int!, $email: String!, $source: Int!, $electronictype: Int!) {
  insert_person_electronic_one(object: {electronic_address: $email, information_source_type_id: $source,
    electronic_type_id: $electronictype, person_id: $pid}) {
    person_id
    person_electronic_id
    electronic_address
    electronic_type {
      electronic_type_id
      electronic_type
    }
    information_source_type {
      information_source_type_id
      information_source_type
    }
    date_first_known_valid
    date_last_known_valid
    date_marked_invalid
  }
}


query campus_query {
  campus {
    campus_id
    campus_name
  }
}

query person_type_query {
  person_type {
    id
    category
  }
}

query person_phone_query($pid: Int!) {
  person_phone(where: { person_id: { _eq: $pid } }) {
    person_phone_id
    person_id
    phone_number
    phone_type {
      phone_type_id
      phone_type
    }
    information_source_type {
      information_source_type_id
      information_source_type
    }
    date_marked_do_not_call
    comments
    date_first_known_valid
    date_last_known_valid
    date_marked_invalid
  }
}

query phone_type_query {
  phone_type {
    phone_type_id
    phone_type
    phone_type_acronym
  }
}